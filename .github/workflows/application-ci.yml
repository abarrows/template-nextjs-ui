name: Application CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/*.ps1'
      - '**/Secrets.json*'
      - '.*ignore'
      - '.github/'
      - '!.github/workflows/application-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  contents: write
  statuses: write

env:
  environment: development

jobs:
  # Sets up dependencies and initial cache
  install:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Setup Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/use-build-args-cache
        with:
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: ./.github/actions/use-install-cache

  # Required status check
  # Checks code quality
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    needs: [install]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_ACTION_CI }}

      - uses: ./.github/actions/use-build-args-cache

      - uses: ./.github/actions/use-install-cache

      - name: Lint javascript
        run: yarn lint:js

      - name: Lint scss
        run: yarn lint:styles

  # Required status check
  # Build the app and cache it
  build:
    name: Build application
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/use-build-args-cache

      - uses: ./.github/actions/use-install-cache

      - uses: ./.github/actions/use-build-cache

  # Required status check
  test-in-ci:
    name: Run CI tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/use-build-args-cache

      - uses: ./.github/actions/use-install-cache

      - uses: ./.github/actions/use-build-cache

      - name: Run Jest tests
        run: yarn test:ci

  check-links:
    name: Check Application Links
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/use-build-args-cache

      - uses: ./.github/actions/use-install-cache

      - uses: ./.github/actions/use-build-cache

      - name: Run Broken Link Checker
        id: link-checker-report
        continue-on-error: true
        run: yarn postbuild && yarn test:links

      - name: Link Checker Results
        if: ${{ failure() }}
        run: echo "::warning ${{steps.link-checker-report.outputs.result}}"

  # Checks gzipped page sizes, uses caches from setup-and-build
  check-size:
    runs-on: ubuntu-latest
    name: Get File Sizes Limits
    needs: [build]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/use-build-args-cache

      - uses: ./.github/actions/use-install-cache

      - uses: ./.github/actions/use-build-cache

      - uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # The size-limit-action tries to run a
          # redundant yarn build
          skip_step: build

  required-checks:
    name: Required Checks
    needs: [build, test-in-ci]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
